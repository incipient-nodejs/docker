name: TudKabir Backend Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --tag ghcr.io/${{ github.repository_owner }}/tudkabir:latest \
            --tag ghcr.io/${{ github.repository_owner }}/tudkabir:${{ github.sha }} \
            --push .

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          password: ${{ secrets.DO_SSH_PASSWORD }}
          script: |
            set -e

            mkdir -p /home/tudkabir-api/htdocs/api.tudkabir.com
            cd /home/tudkabir-api/htdocs/api.tudkabir.com

            echo "🔐 Logging in to GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "🔗 Creating shared Docker network (if not exists)..."
            docker network inspect tudkabir-net >/dev/null 2>&1 || docker network create tudkabir-net

            echo "🧠 Ensuring Redis container is running..."
            if ! docker ps --format '{{.Names}}' | grep -q '^tudkabir_redis$'; then
              if docker ps -a --format '{{.Names}}' | grep -q '^tudkabir_redis$'; then
                echo "⏳ Starting existing Redis container..."
                docker start tudkabir_redis
              else
                echo "🚀 Creating new Redis container..."
                docker volume inspect tudkabir_redis_data >/dev/null 2>&1 || docker volume create tudkabir_redis_data
                docker run -d \
                  --name tudkabir_redis \
                  --network tudkabir-net \
                  --restart unless-stopped \
                  -v tudkabir_redis_data:/data \
                  redis:alpine
              fi
            else
              echo "✅ Redis container is already running."
            fi

            echo "▶ Pulling latest Laravel app image..."
            docker pull ghcr.io/${{ github.repository_owner }}/tudkabir:latest

            echo "🌱 Setting dynamic port for green container..."
            GREEN_PORT=9001  # Can be dynamically generated if needed

            echo "🟢 Starting green container on port $GREEN_PORT..."
            docker rm -f tubkair_green || true
            docker run -d \
              --name tubkair_green \
              --env-file .env \
              --network tudkabir-net \
              -p ${GREEN_PORT}:9000 \
              --restart unless-stopped \
              ghcr.io/${{ github.repository_owner }}/tudkabir:latest

            echo "🔍 Health check for green container..."
            for i in {1..30}; do
              if curl -s http://localhost:$GREEN_PORT/api/healthz | grep -q "ok"; then
                echo "✅ Green container healthy"
                break
              fi
              echo "⏳ Waiting for health check... ($i/30)"
              sleep 1
              if [ "$i" -eq 30 ]; then
                echo "❌ Green container failed health check"
                docker logs tubkair_green || true
                docker rm -f tubkair_green
                exit 1
              fi
            done

            echo "🔁 Switching NGINX to green (port 9001)..."
            sudo sed -i 's/127.0.0.1:9000/127.0.0.1:9001/g' /etc/nginx/sites-enabled/api.tudkabir.com.conf
            sudo nginx -s reload

            echo "✅ Replacing blue container on 9000..."
            docker stop tubkair_blue || true
            docker rm -f tubkair_blue || true

            docker run -d \
              --name tubkair_blue \
              --env-file .env \
              --network tudkabir-net \
              -p 9000:9000 \
              --restart unless-stopped \
              ghcr.io/${{ github.repository_owner }}/tudkabir:latest

            echo "🔁 Switching NGINX back to blue (port 9000)..."
            sudo sed -i 's/127.0.0.1:9001/127.0.0.1:9000/g' /etc/nginx/sites-enabled/api.tudkabir.com.conf
            sudo nginx -s reload

            echo "🧹 Cleaning up..."
            docker stop tubkair_green || true
            docker system prune -a -f --volumes

            echo "✅ Deployment successful (Blue container running on port 9000)"

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: always()
    steps:
      - name: Get failed job log
        env:
          GH_TOKEN: ${{ secrets.GH_API_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          API="https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs"

          # Fetch job metadata
          JOBS=$(curl -s -H "Authorization: token $GH_TOKEN" "$API")
          FAILED=$(echo "$JOBS" | jq '.jobs[] | select(.conclusion != "success") | {name, id}' | jq -s .)

          if [[ "$FAILED" == "[]" ]]; then
            echo "✅ CI/CD completed successfully" | jq -Rs '{text: .}' > payload.json
          else
            JOB_ID=$(echo "$FAILED" | jq -r '.[0].id')
            JOB_NAME=$(echo "$FAILED" | jq -r '.[0].name')

            LOG_URL="https://api.github.com/repos/$REPO/actions/jobs/$JOB_ID/logs"
            curl -s -L -H "Authorization: token $GH_TOKEN" "$LOG_URL" -o job.log

            MSG="❌ *$JOB_NAME failed*\n\`\`\`\n$(tail -n 50 job.log)\n\`\`\`"
            echo "$MSG" | jq -Rs '{text: .}' > payload.json
          fi

      - name: Send to Mattermost
        run: |
          curl -s -X POST -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ secrets.MATTERMOST_WEBHOOK_URL }}"

        if: always()
        env:
          GH_TOKEN: ${{ secrets.GHCR_PAT }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          run: |
            JOBS_JSON=$(curl -s -H "Authorization: token $GH_TOKEN" \
              https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs)

            BUILD_ID=$(echo "$JOBS_JSON" | jq '.jobs[] | select(.name=="build-and-push") | .id')
            DEPLOY_ID=$(echo "$JOBS_JSON" | jq '.jobs[] | select(.name=="deploy") | .id')

            BUILD_URL="https://github.com/$REPO/actions/runs/$RUN_ID/job/$BUILD_ID"
            DEPLOY_URL="https://github.com/$REPO/actions/runs/$RUN_ID/job/$DEPLOY_ID"

            TEXT="#### 🚀 *TudKabir Deployment Result*  \n\
            • 🔨 *Build & Push Logs:* [$BUILD_ID]($BUILD_URL)  \n\
            • 🚀 *Deploy Logs:* [$DEPLOY_ID]($DEPLOY_URL)"

            curl -X POST -H 'Content-Type: application/json' \
              --data "{\"text\": \"$TEXT\"}" \
              $WEBHOOK